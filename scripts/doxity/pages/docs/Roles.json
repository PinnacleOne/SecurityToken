{"title":"Roles","fileName":"/contracts/Roles.sol","name":"Roles","abi":[],"bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058206c108a640b6f9a286642267383f883c2dd57acd733b9dea7274d61e5e46a13380029","opcodes":"PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH13 0x108A640B6F9A286642267383F8 DUP4 0xc2 0xdd JUMPI 0xac 0xd7 CALLER 0xb9 0xde 0xa7 0x27 0x4d PUSH2 0xE5E4 PUSH11 0x1338002900000000000000 ","source":"pragma solidity ^0.4.25;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n    * @dev give an account access to this role\n    */\n    function add(Role storage role, address account) internal {\n        require(account != address(0), \"Address cannot be zero\");\n        require(!has(role, account), \"Role already exist\");\n\n        role.bearer[account] = true;\n    }\n\n    /**\n    * @dev remove an account's access to this role\n    */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0), \"Address cannot be zero\");\n        require(has(role, account), \"Role is nort exist\");\n\n        role.bearer[account] = false;\n    }\n\n    /**\n    * @dev check if an account has this role\n    * @return bool\n    */\n    function has(Role storage role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        require(account != address(0), \"Address cannot be zero\");\n        return role.bearer[account];\n    }\n}\n","abiDocs":[]}
