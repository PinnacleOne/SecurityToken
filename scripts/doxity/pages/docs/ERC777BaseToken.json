{"fileName":"/contracts/ERC777BaseToken.sol","name":"ERC777BaseToken","abi":[{"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"removedWhiteListAddressesLog","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"forceRemoveDepositAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"addAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isPauser","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"removeAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"version","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isDepositOperator","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"addedWhiteListAddressesLog","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renouncePauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"unfreezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isWhiteListDisabled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addPauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_operator","type":"address"},{"name":"_tokenHolder","type":"address"}],"name":"forceAuthorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"addDepositOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_operator","type":"address"},{"name":"_tokenHolder","type":"address"}],"name":"forceRevokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_addresses","type":"address[]"}],"name":"addDepositAddresses","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isDepositAddress","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"enableWhitelist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"disableWhitelist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"whitelisted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_operator","type":"address"},{"name":"_tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isAccountFrozen","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"freezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_tokenHolder","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_operatorData","type":"bytes"}],"name":"operatorBurn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"removeDepositOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_granularity","type":"uint256"},{"name":"_defaultOperators","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"},{"indexed":false,"name":"isWhitelisted","type":"bool"}],"name":"Whitelisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"operatorData","type":"bytes"}],"name":"Sent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"operatorData","type":"bytes"}],"name":"Minted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"operatorData","type":"bytes"}],"name":"Burned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"tokenHolder","type":"address"}],"name":"AuthorizedOperator","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"tokenHolder","type":"address"}],"name":"RevokedOperator","type":"event"}],"bin":"","opcodes":"","source":"pragma solidity ^0.4.25;\n\nimport { ERC820Implementer } from \"./ERC820Implementer.sol\";\nimport { SafeMath } from \"./SafeMath.sol\";\nimport { ERC777Token } from \"./ERC777Token.sol\";\nimport { ERC777TokensSender } from \"./ERC777TokensSender.sol\";\nimport { ERC777TokensRecipient } from \"./ERC777TokensRecipient.sol\";\nimport { Whitelist } from \"./Whitelist.sol\";\n\n\ncontract ERC777BaseToken is ERC777Token, ERC820Implementer, Whitelist {\n    using SafeMath for uint256;\n\n    string internal mName;\n    string internal mSymbol;\n    uint256 internal mGranularity;\n    uint256 internal mTotalSupply;\n\n\n    mapping(address => uint) internal mBalances;\n\n    address[] internal mDefaultOperators;\n    mapping(address => bool) internal mIsDefaultOperator;\n    mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator;\n    mapping(address => mapping(address => bool)) internal mAuthorizedOperators;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    constructor(string _name, string _symbol, uint256 _granularity, address[] _defaultOperators) internal {\n        mName = _name;\n        mSymbol = _symbol;\n        mTotalSupply = 0;\n        require(_granularity >= 1, \"Granularity must be > 1\");\n        mGranularity = _granularity;\n\n        mDefaultOperators = _defaultOperators;\n        for (uint256 i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }\n\n        setInterfaceImplementation(\"ERC777Token\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public view returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public view returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public view returns (uint256) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public view returns (uint256) { return mTotalSupply; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public view returns (uint256) { return mBalances[_tokenHolder]; }\n\n    /// @notice Return the list of default operators\n    /// @return the list of all the default operators\n    function defaultOperators() public view returns (address[]) { return mDefaultOperators; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_data` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint256 _amount, bytes _data) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _data, \"\", true);\n    }\n    \n    \n    function forceAuthorizeOperator(address _operator, address _tokenHolder) public onlyOwner {\n        require(_tokenHolder != msg.sender && _operator != _tokenHolder, \n            \"Cannot authorize yourself as an operator or token holder or token holder cannot be as operator or vice versa\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][_tokenHolder] = false;\n        } else {\n            mAuthorizedOperators[_operator][_tokenHolder] = true;\n        }\n        emit AuthorizedOperator(_operator, _tokenHolder);\n    }\n    \n    \n    function forceRevokeOperator(address _operator, address _tokenHolder) public onlyOwner {\n        require(_tokenHolder != msg.sender && _operator != _tokenHolder, \n            \"Cannot authorize yourself as an operator or token holder or token holder cannot be as operator or vice versa\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][_tokenHolder] = true;\n        } else {\n            mAuthorizedOperators[_operator][_tokenHolder] = false;\n        }\n        emit RevokedOperator(_operator, _tokenHolder);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    /*function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender, \"Cannot authorize yourself as an operator\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = false;\n        } else {\n            mAuthorizedOperators[_operator][msg.sender] = true;\n        }\n        emit AuthorizedOperator(_operator, msg.sender);\n    }*/\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    /*function revokeOperator(address _operator) public {\n        require(_operator != msg.sender, \"Cannot revoke yourself as an operator\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = true;\n        } else {\n            mAuthorizedOperators[_operator][msg.sender] = false;\n        }\n        emit RevokedOperator(_operator, msg.sender);\n    }*/\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\n        return (_operator == _tokenHolder // solium-disable-line operator-whitespace\n            || mAuthorizedOperators[_operator][_tokenHolder]\n            || (mIsDefaultOperator[_operator] && !mRevokedDefaultOperator[_operator][_tokenHolder]));\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint256 _amount, bytes _data, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from), \"Not an operator\");\n        addWhitelistAddress(_to);\n        doSend(msg.sender, _from, _to, _amount, _data, _operatorData, true);\n    }\n\n    function burn(uint256 _amount, bytes _data) public {\n        doBurn(msg.sender, msg.sender, _amount, _data, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint256 _amount, bytes _data, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder), \"Not an operator\");\n        doBurn(msg.sender, _tokenHolder, _amount, _data, _operatorData);\n        if(mBalances[_tokenHolder] == 0)\n            removeWhitelistAddress(_tokenHolder);\n    }\n\n    /* -- Helper Functions -- */\n    //\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint256 _amount) internal view {\n        require(_amount % mGranularity == 0, \"Amount is not a multiple of granualrity\");\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    function isRegularAddress(address _addr) internal view returns(bool) {\n        if (_addr == 0) { return false; }\n        uint size;\n        assembly { size := extcodesize(_addr) } // solium-disable-line security/no-inline-assembly\n        return size == 0;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777tokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _data,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal isTransferable\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _data, _operatorData);\n\n        require(_to != address(0), \"Cannot send to 0x0\");\n        require(mBalances[_from] >= _amount, \"Not enough funds\");\n        require(whitelisted(_to) || (isDepositAddress[_to] == true && whitelisted(_from)), \"Recipient is not whitelisted\");\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _data, _operatorData, _preventLocking);\n\n        emit Sent(_operator, _from, _to, _amount, _data, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _data Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint256 _amount, bytes _data, bytes _operatorData)\n        internal\n    {\n        callSender(_operator, _tokenHolder, 0x0, _amount, _data, _operatorData);\n\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount, \"Not enough funds\");\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        emit Burned(_operator, _tokenHolder, _amount, _data, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _data,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\n        if (recipientImplementation != 0) {\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _data, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to), \"Cannot send to contract without ERC777TokensRecipient\");\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes _data,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\n        if (senderImplementation == 0) { return; }\n        ERC777TokensSender(senderImplementation).tokensToSend(\n            _operator, _from, _to, _amount, _data, _operatorData);\n    }\n}","abiDocs":[{"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function","return":"the list of all the default operators","notice":"Return the list of default operators","signature":"defaultOperators()","signatureHash":"06e48538"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function","return":"the name of the token","signature":"name()","signatureHash":"06fdde03"},{"constant":true,"inputs":[],"name":"removedWhiteListAddressesLog","payable":false,"stateMutability":"view","type":"function","signature":"removedWhiteListAddressesLog()","signatureHash":"0b5ddb03"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"forceRemoveDepositAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"forceRemoveDepositAddress(address)","signatureHash":"103844fc"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"the total supply of the token","signature":"totalSupply()","signatureHash":"18160ddd"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"addAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"addAddress(address)","signatureHash":"38eada1c"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"called by the owner to unpause, returns to normal state","signature":"unpause()","signatureHash":"3f4ba83a"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isPauser","payable":false,"stateMutability":"view","type":"function","signature":"isPauser(address)","signatureHash":"46fbf68e"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"removeAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"removeAddress(address)","signatureHash":"4ba79dfe"},{"constant":true,"inputs":[],"name":"version","payable":false,"stateMutability":"view","type":"function","signature":"version()","signatureHash":"54fd4d50"},{"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"the granularity of the token","signature":"granularity()","signatureHash":"556f0dc7"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isDepositOperator","payable":false,"stateMutability":"view","type":"function","signature":"isDepositOperator(address)","signatureHash":"5979612d"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"true if the contract is paused, false otherwise.","signature":"paused()","signatureHash":"5c975abb"},{"constant":true,"inputs":[],"name":"addedWhiteListAddressesLog","payable":false,"stateMutability":"view","type":"function","signature":"addedWhiteListAddressesLog()","signatureHash":"5ee24287"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"The address holding the tokens being sent"},{"name":"_to","type":"address","description":"The address of the recipient"},{"name":"_amount","type":"uint256","description":"The number of tokens to be sent"},{"name":"_data","type":"bytes","description":"Data generated by the user to be sent to the recipient"},{"name":"_operatorData","type":"bytes","description":"Data generated by the operator to be sent to the recipient"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Send `_amount` of tokens on behalf of the address `from` to the address `to`.","signature":"operatorSend(address,address,uint256,bytes,bytes)","signatureHash":"62ad1b83"},{"constant":false,"inputs":[],"name":"renouncePauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"renouncePauser()","signatureHash":"6ef8d66d"},{"constant":true,"inputs":[{"name":"_tokenHolder","type":"address","description":"Address for which the balance is returned"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"the balance of `_tokenAddress`.","notice":"Return the account balance of some account","signature":"balanceOf(address)","signatureHash":"70a08231"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"unfreezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"unfreezeAccount(address)","signatureHash":"788649ea"},{"constant":true,"inputs":[],"name":"isWhiteListDisabled","payable":false,"stateMutability":"view","type":"function","signature":"isWhiteListDisabled()","signatureHash":"7cea4d04"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addPauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"addPauser(address)","signatureHash":"82dc1ec4"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"called by the owner to pause, triggers stopped state","signature":"pause()","signatureHash":"8456cb59"},{"constant":false,"inputs":[{"name":"_operator","type":"address"},{"name":"_tokenHolder","type":"address"}],"name":"forceAuthorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"forceAuthorizeOperator(address,address)","signatureHash":"869a862f"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","return":"the address of the owner.","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"true if `msg.sender` is the owner of the contract.","signature":"isOwner()","signatureHash":"8f32d59b"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"addDepositOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"addDepositOperator(address)","signatureHash":"931ea7d7"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function","return":"the symbol of the token","signature":"symbol()","signatureHash":"95d89b41"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"The address of the recipient"},{"name":"_amount","type":"uint256","description":"The number of tokens to be sent"},{"name":"_data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Send `_amount` of tokens to address `_to` passing `_data` to the recipient","signature":"send(address,uint256,bytes)","signatureHash":"9bd9bbc6"},{"constant":false,"inputs":[{"name":"_operator","type":"address"},{"name":"_tokenHolder","type":"address"}],"name":"forceRevokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"forceRevokeOperator(address,address)","signatureHash":"a7469a60"},{"constant":false,"inputs":[{"name":"_addresses","type":"address[]"}],"name":"addDepositAddresses","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"addDepositAddresses(address[])","signatureHash":"b38bd416"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isDepositAddress","payable":false,"stateMutability":"view","type":"function","signature":"isDepositAddress(address)","signatureHash":"bacfddbc"},{"constant":false,"inputs":[],"name":"enableWhitelist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"enableWhitelist()","signatureHash":"cdfb2b4e"},{"constant":false,"inputs":[],"name":"disableWhitelist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"disableWhitelist()","signatureHash":"d6b0f484"},{"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"whitelisted","payable":false,"stateMutability":"view","type":"function","signature":"whitelisted(address)","signatureHash":"d936547e"},{"constant":true,"inputs":[{"name":"_operator","type":"address","description":"address to check if it has the right to manage the tokens"},{"name":"_tokenHolder","type":"address","description":"address which holds the tokens to be managed"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"`true` if `_operator` is authorized for `_tokenHolder`","notice":"Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.","signature":"isOperatorFor(address,address)","signatureHash":"d95b6371"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isAccountFrozen","payable":false,"stateMutability":"view","type":"function","signature":"isAccountFrozen(address)","signatureHash":"e816d97f"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"freezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"freezeAccount(address)","signatureHash":"f26c159f"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"The address to transfer ownership to."}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"constant":false,"inputs":[{"name":"_tokenHolder","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_operatorData","type":"bytes"}],"name":"operatorBurn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"operatorBurn(address,uint256,bytes,bytes)","signatureHash":"fc673c4f"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"removeDepositOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"removeDepositOperator(address)","signatureHash":"fcfa6411"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"burn(uint256,bytes)","signatureHash":"fe9d9303"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_granularity","type":"uint256"},{"name":"_defaultOperators","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"},{"indexed":false,"name":"isWhitelisted","type":"bool"}],"name":"Whitelisted","type":"event","signature":"Whitelisted(address,bool)","signatureHash":"a5471451"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Paused","type":"event","signature":"Paused(address)","signatureHash":"62e78cea"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Unpaused","type":"event","signature":"Unpaused(address)","signatureHash":"5db9ee0a"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserAdded","type":"event","signature":"PauserAdded(address)","signatureHash":"6719d08c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserRemoved","type":"event","signature":"PauserRemoved(address)","signatureHash":"cd265eba"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"operatorData","type":"bytes"}],"name":"Sent","type":"event","signature":"Sent(address,address,address,uint256,bytes,bytes)","signatureHash":"06b541dd"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"operatorData","type":"bytes"}],"name":"Minted","type":"event","signature":"Minted(address,address,uint256,bytes)","signatureHash":"bcd28e05"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"operatorData","type":"bytes"}],"name":"Burned","type":"event","signature":"Burned(address,address,uint256,bytes,bytes)","signatureHash":"a78a9be3"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"tokenHolder","type":"address"}],"name":"AuthorizedOperator","type":"event","signature":"AuthorizedOperator(address,address)","signatureHash":"f4caeb2d"},{"anonymous":false,"inputs":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"tokenHolder","type":"address"}],"name":"RevokedOperator","type":"event","signature":"RevokedOperator(address,address)","signatureHash":"50546e66"}]}
